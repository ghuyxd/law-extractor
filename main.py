#!/usr/bin/env python3
"""
Ch∆∞∆°ng tr√¨nh x·ª≠ l√Ω vƒÉn b·∫£n ph√°p lu·∫≠t
ƒê·ªçc c√°c file JSON t·ª´ th∆∞ m·ª•c spelling_fixed_json v√† ph√¢n t√≠ch n·ªôi dung
"""

import os
import json
import argparse
from pathlib import Path
from typing import List, Dict, Any

from processors.lenh_processor import LenhProcessor
from processors.luat_processor import LuatProcessor
from processors.nghi_dinh_processor import NghiDinhProcessor
from processors.nghi_quyet_processor import NghiQuyetProcessor
from processors.quyet_dinh_processor import QuyetDinhProcessor
from processors.thong_tu_processor import ThongTuProcessor
from processors.chi_thi_processor import ChiThiProcessor
from processors.cong_van_processor import CongVanProcessor
from processors.cong_dien_processor import CongDienProcessor
from processors.ket_luan_processor import KetLuanProcessor
from processors.phap_lenh_processor import PhapLenhProcessor
from processors.thong_bao_processor import ThongBaoProcessor
from processors.huong_dan_processor import HuongDanProcessor
from processors.ke_hoach_processor import KeHoachProcessor
from processors.quy_dinh_processor import QuyDinhProcessor
from processors.quy_che_processor import QuyCheProcessor
from processors.phuong_an_processor import PhuongAnProcessor
from processors.de_an_processor import DeAnProcessor
from processors.thong_tu_lien_tich_processor import ThongTuLienTichProcessor
from processors.van_ban_hop_nhat_processor import VanBanHopNhatProcessor
from processors.quy_chuan_viet_nam_processor import QuyChuanVietNamProcessor
from utils.file_utils import read_json_file, write_json_file, get_all_json_files
from utils.text_utils import clean_text


class LawDocumentProcessor:
    """L·ªõp ch√≠nh ƒë·ªÉ x·ª≠ l√Ω c√°c vƒÉn b·∫£n ph√°p lu·∫≠t"""
    
    def __init__(self, input_dir: str = "pdf-ocr-extractor/spelling_fixed_json"):
        self.input_dir = Path(input_dir)
        self.processors = self._init_processors()
        
    def _init_processors(self) -> Dict[str, Any]:
        """Kh·ªüi t·∫°o c√°c processor cho t·ª´ng lo·∫°i vƒÉn b·∫£n"""
        return {
            "L·ªánh": LenhProcessor(),
            "Lu·∫≠t": LuatProcessor(),
            "Ngh·ªã ƒë·ªãnh": NghiDinhProcessor(),
            "Ngh·ªã quy·∫øt": NghiQuyetProcessor(),
            "Quy·∫øt ƒë·ªãnh": QuyetDinhProcessor(),
            "Th√¥ng t∆∞": ThongTuProcessor(),
            "Ch·ªâ th·ªã": ChiThiProcessor(),
            "C√¥ng vƒÉn": CongVanProcessor(),
            "C√¥ng ƒëi·ªán": CongDienProcessor(),
            "K·∫øt lu·∫≠n": KetLuanProcessor(),
            "Ph√°p l·ªánh": PhapLenhProcessor(),
            "Th√¥ng b√°o": ThongBaoProcessor(),
            "H∆∞·ªõng d·∫´n": HuongDanProcessor(),
            "K·∫ø ho·∫°ch": KeHoachProcessor(),
            "Quy ƒë·ªãnh": QuyDinhProcessor(),
            "Quy ch·∫ø": QuyCheProcessor(),
            "Ph∆∞∆°ng √°n": PhuongAnProcessor(),
            "ƒê·ªÅ √°n": DeAnProcessor(),
            "Th√¥ng t∆∞ li√™n t·ªãch": ThongTuLienTichProcessor(),
            "VƒÉn b·∫£n h·ª£p nh·∫•t": VanBanHopNhatProcessor(),
            "Quy chu·∫©n vi·ªát nam": QuyChuanVietNamProcessor(),
        }
    
    def process_directory(self, doc_type: str = None, output_dir: str = "output") -> Dict[str, List[Dict[str, Any]]]:
        """
        X·ª≠ l√Ω t·∫•t c·∫£ file trong th∆∞ m·ª•c ho·∫∑c ch·ªâ m·ªôt lo·∫°i vƒÉn b·∫£n c·ª• th·ªÉ
        
        Args:
            doc_type: Lo·∫°i vƒÉn b·∫£n c·∫ßn x·ª≠ l√Ω (None ƒë·ªÉ x·ª≠ l√Ω t·∫•t c·∫£)
            output_dir: Th∆∞ m·ª•c ƒë·∫ßu ra
            
        Returns:
            Dict v·ªõi key l√† lo·∫°i vƒÉn b·∫£n v√† value l√† list c√°c vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch
        """
        results = {}
        
        if doc_type:
            # X·ª≠ l√Ω ch·ªâ m·ªôt lo·∫°i vƒÉn b·∫£n
            doc_dir = self.input_dir / doc_type
            if doc_dir.exists() and doc_type in self.processors:
                files = get_all_json_files(doc_dir)
                processed_docs = self._process_files(files, doc_type)
                if processed_docs:
                    results[doc_type] = processed_docs
                    self._save_by_document_type(doc_type, processed_docs, output_dir)
        else:
            # X·ª≠ l√Ω t·∫•t c·∫£ lo·∫°i vƒÉn b·∫£n
            for doc_type_dir in self.input_dir.iterdir():
                if doc_type_dir.is_dir() and doc_type_dir.name in self.processors:
                    doc_type_name = doc_type_dir.name
                    files = get_all_json_files(doc_type_dir)
                    processed_docs = self._process_files(files, doc_type_name)
                    if processed_docs:
                        results[doc_type_name] = processed_docs
                        self._save_by_document_type(doc_type_name, processed_docs, output_dir)
        
        return results
    
    def _process_files(self, files: List[Path], doc_type: str) -> List[Dict[str, Any]]:
        """X·ª≠ l√Ω danh s√°ch file c·ªßa m·ªôt lo·∫°i vƒÉn b·∫£n"""
        results = []
        processor = self.processors[doc_type]
        
        for file_path in files:
            try:
                print(f"ƒêang x·ª≠ l√Ω: {file_path}")
                data = read_json_file(file_path)
                
                if data and 'text' in data:
                    processed_doc = processor.process(data['text'], data.get('filename', ''))
                    if processed_doc:
                        results.append(processed_doc)
                        
            except Exception as e:
                print(f"L·ªói khi x·ª≠ l√Ω file {file_path}: {str(e)}")
                continue
        
        return results
    
    def _save_by_document_type(self, doc_type: str, documents: List[Dict[str, Any]], output_dir: str):
        """L∆∞u c√°c vƒÉn b·∫£n theo lo·∫°i v√†o th∆∞ m·ª•c ri√™ng"""
        try:
            # T·∫°o th∆∞ m·ª•c cho lo·∫°i vƒÉn b·∫£n
            type_dir = Path(output_dir) / doc_type
            type_dir.mkdir(parents=True, exist_ok=True)
            
            # L∆∞u t·ª´ng vƒÉn b·∫£n v√†o file ri√™ng
            for doc in documents:
                filename = f"{doc.get('so_hieu', 'unknown').replace('/', '-')}.json"
                # Lo·∫°i b·ªè k√Ω t·ª± kh√¥ng h·ª£p l·ªá trong t√™n file
                filename = "".join(c for c in filename if c.isalnum() or c in ('-', '_', '.')).rstrip()
                if not filename.endswith('.json'):
                    filename += '.json'
                
                file_path = type_dir / filename
                write_json_file(doc, str(file_path))
                
            print(f"‚úÖ ƒê√£ l∆∞u {len(documents)} vƒÉn b·∫£n {doc_type} v√†o: {type_dir}")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u vƒÉn b·∫£n {doc_type}: {str(e)}")
    
    def _save_summary(self, results: Dict[str, List[Dict[str, Any]]], output_dir: str):
        """L∆∞u file t·ªïng h·ª£p k·∫øt qu·∫£"""
        try:
            summary = {
                "tong_quan": {
                    "tong_so_van_ban": sum(len(docs) for docs in results.values()),
                    "so_loai_van_ban": len(results),
                    "thong_ke_theo_loai": {
                        doc_type: len(docs) for doc_type, docs in results.items()
                    }
                },
                "chi_tiet_theo_loai": {}
            }
            
            # Th√™m chi ti·∫øt t·ª´ng lo·∫°i
            for doc_type, docs in results.items():
                summary["chi_tiet_theo_loai"][doc_type] = [
                    {
                        "so_hieu": doc.get("so_hieu"),
                        "ngay_ban_hanh": doc.get("ngay_ban_hanh"),
                        "trich_yeu": doc.get("trich_yeu"),
                        "co_quan_ban_hanh": doc.get("co_quan_ban_hanh"),
                        "nguoi_ky": doc.get("nguoi_ky")
                    }
                    for doc in docs
                ]
            
            summary_file = Path(output_dir) / "summary.json"
            write_json_file(summary, str(summary_file))
            print(f"üìä ƒê√£ t·∫°o file t·ªïng h·ª£p: {summary_file}")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫°o file t·ªïng h·ª£p: {str(e)}")

    def process_single_file(self, file_path: str, output_dir: str = "output") -> Dict[str, Any]:
        """X·ª≠ l√Ω m·ªôt file c·ª• th·ªÉ"""
        file_path = Path(file_path)
        
        # X√°c ƒë·ªãnh lo·∫°i vƒÉn b·∫£n t·ª´ th∆∞ m·ª•c cha
        doc_type = file_path.parent.name
        
        if doc_type not in self.processors:
            raise ValueError(f"Kh√¥ng h·ªó tr·ª£ lo·∫°i vƒÉn b·∫£n: {doc_type}")
        
        data = read_json_file(file_path)
        processor = self.processors[doc_type]
        
        result = processor.process(data['text'], data.get('filename', ''))
        
        # L∆∞u k·∫øt qu·∫£ v√†o th∆∞ m·ª•c output
        if result:
            self._save_by_document_type(doc_type, [result], output_dir)
        
        return result


def main():
    """H√†m main c·ªßa ch∆∞∆°ng tr√¨nh"""
    parser = argparse.ArgumentParser(description="X·ª≠ l√Ω vƒÉn b·∫£n ph√°p lu·∫≠t")
    parser.add_argument("--input-dir", default="pdf-ocr-extractor/spelling_fixed_json",
                       help="Th∆∞ m·ª•c ch·ª©a file JSON ƒë·∫ßu v√†o")
    parser.add_argument("--output-dir", default="output",
                       help="Th∆∞ m·ª•c ƒë·∫ßu ra")
    parser.add_argument("--doc-type", help="Lo·∫°i vƒÉn b·∫£n c·∫ßn x·ª≠ l√Ω (t√πy ch·ªçn)")
    parser.add_argument("--single-file", help="X·ª≠ l√Ω m·ªôt file c·ª• th·ªÉ")
    
    args = parser.parse_args()
    
    processor = LawDocumentProcessor(args.input_dir)
    
    try:
        if args.single_file:
            # X·ª≠ l√Ω m·ªôt file
            result = processor.process_single_file(args.single_file, args.output_dir)
            if result:
                print(f"\n‚úÖ Ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω 1 vƒÉn b·∫£n.")
                print(f"üìÅ K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c: {args.output_dir}")
            else:
                print("‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω file.")
                return 1
        else:
            # X·ª≠ l√Ω th∆∞ m·ª•c
            results = processor.process_directory(args.doc_type, args.output_dir)
            
            # T·∫°o file t·ªïng h·ª£p
            processor._save_summary(results, args.output_dir)
            
            total_docs = sum(len(docs) for docs in results.values())
            print(f"\nüéâ Ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω {total_docs} vƒÉn b·∫£n.")
            print(f"üìÅ K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c: {args.output_dir}")
            
            # Hi·ªÉn th·ªã th·ªëng k√™
            if results:
                print(f"\nüìä Th·ªëng k√™ theo lo·∫°i vƒÉn b·∫£n:")
                for doc_type, docs in results.items():
                    print(f"   üìÑ {doc_type}: {len(docs)} vƒÉn b·∫£n")
                    
    except Exception as e:
        print(f"‚ùå L·ªói: {str(e)}")
        return 1
    
    return 0


if __name__ == "__main__":
    exit(main())